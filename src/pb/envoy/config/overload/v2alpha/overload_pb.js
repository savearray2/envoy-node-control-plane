/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
var validate_validate_pb = require('../../../../validate/validate_pb.js');
goog.exportSymbol('proto.envoy.config.overload.v2alpha.OverloadAction', null, global);
goog.exportSymbol('proto.envoy.config.overload.v2alpha.OverloadManager', null, global);
goog.exportSymbol('proto.envoy.config.overload.v2alpha.ResourceMonitor', null, global);
goog.exportSymbol('proto.envoy.config.overload.v2alpha.ThresholdTrigger', null, global);
goog.exportSymbol('proto.envoy.config.overload.v2alpha.Trigger', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.overload.v2alpha.ResourceMonitor.oneofGroups_);
};
goog.inherits(proto.envoy.config.overload.v2alpha.ResourceMonitor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.overload.v2alpha.ResourceMonitor.displayName = 'proto.envoy.config.overload.v2alpha.ResourceMonitor';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.ConfigTypeCase = {
  CONFIG_TYPE_NOT_SET: 0,
  CONFIG: 2,
  TYPED_CONFIG: 3
};

/**
 * @return {proto.envoy.config.overload.v2alpha.ResourceMonitor.ConfigTypeCase}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.getConfigTypeCase = function() {
  return /** @type {proto.envoy.config.overload.v2alpha.ResourceMonitor.ConfigTypeCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.overload.v2alpha.ResourceMonitor.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.overload.v2alpha.ResourceMonitor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.overload.v2alpha.ResourceMonitor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    config: (f = msg.getConfig()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    typedConfig: (f = msg.getTypedConfig()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.overload.v2alpha.ResourceMonitor}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.overload.v2alpha.ResourceMonitor;
  return proto.envoy.config.overload.v2alpha.ResourceMonitor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.overload.v2alpha.ResourceMonitor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.overload.v2alpha.ResourceMonitor}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setTypedConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.overload.v2alpha.ResourceMonitor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.overload.v2alpha.ResourceMonitor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getTypedConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional google.protobuf.Struct config = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.getConfig = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.setConfig = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.overload.v2alpha.ResourceMonitor.oneofGroups_[0], value);
};


proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Any typed_config = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.getTypedConfig = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.setTypedConfig = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.envoy.config.overload.v2alpha.ResourceMonitor.oneofGroups_[0], value);
};


proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.clearTypedConfig = function() {
  this.setTypedConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.overload.v2alpha.ResourceMonitor.prototype.hasTypedConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.overload.v2alpha.ThresholdTrigger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.overload.v2alpha.ThresholdTrigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.overload.v2alpha.ThresholdTrigger.displayName = 'proto.envoy.config.overload.v2alpha.ThresholdTrigger';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.overload.v2alpha.ThresholdTrigger.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.overload.v2alpha.ThresholdTrigger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.overload.v2alpha.ThresholdTrigger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.overload.v2alpha.ThresholdTrigger.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.overload.v2alpha.ThresholdTrigger}
 */
proto.envoy.config.overload.v2alpha.ThresholdTrigger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.overload.v2alpha.ThresholdTrigger;
  return proto.envoy.config.overload.v2alpha.ThresholdTrigger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.overload.v2alpha.ThresholdTrigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.overload.v2alpha.ThresholdTrigger}
 */
proto.envoy.config.overload.v2alpha.ThresholdTrigger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.overload.v2alpha.ThresholdTrigger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.overload.v2alpha.ThresholdTrigger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.overload.v2alpha.ThresholdTrigger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.overload.v2alpha.ThresholdTrigger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.envoy.config.overload.v2alpha.ThresholdTrigger.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.envoy.config.overload.v2alpha.ThresholdTrigger.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.overload.v2alpha.Trigger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.overload.v2alpha.Trigger.oneofGroups_);
};
goog.inherits(proto.envoy.config.overload.v2alpha.Trigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.overload.v2alpha.Trigger.displayName = 'proto.envoy.config.overload.v2alpha.Trigger';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.overload.v2alpha.Trigger.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.envoy.config.overload.v2alpha.Trigger.TriggerOneofCase = {
  TRIGGER_ONEOF_NOT_SET: 0,
  THRESHOLD: 2
};

/**
 * @return {proto.envoy.config.overload.v2alpha.Trigger.TriggerOneofCase}
 */
proto.envoy.config.overload.v2alpha.Trigger.prototype.getTriggerOneofCase = function() {
  return /** @type {proto.envoy.config.overload.v2alpha.Trigger.TriggerOneofCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.overload.v2alpha.Trigger.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.overload.v2alpha.Trigger.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.overload.v2alpha.Trigger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.overload.v2alpha.Trigger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.overload.v2alpha.Trigger.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    threshold: (f = msg.getThreshold()) && proto.envoy.config.overload.v2alpha.ThresholdTrigger.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.overload.v2alpha.Trigger}
 */
proto.envoy.config.overload.v2alpha.Trigger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.overload.v2alpha.Trigger;
  return proto.envoy.config.overload.v2alpha.Trigger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.overload.v2alpha.Trigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.overload.v2alpha.Trigger}
 */
proto.envoy.config.overload.v2alpha.Trigger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.envoy.config.overload.v2alpha.ThresholdTrigger;
      reader.readMessage(value,proto.envoy.config.overload.v2alpha.ThresholdTrigger.deserializeBinaryFromReader);
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.overload.v2alpha.Trigger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.overload.v2alpha.Trigger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.overload.v2alpha.Trigger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.overload.v2alpha.Trigger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getThreshold();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.overload.v2alpha.ThresholdTrigger.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.envoy.config.overload.v2alpha.Trigger.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.overload.v2alpha.Trigger.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ThresholdTrigger threshold = 2;
 * @return {?proto.envoy.config.overload.v2alpha.ThresholdTrigger}
 */
proto.envoy.config.overload.v2alpha.Trigger.prototype.getThreshold = function() {
  return /** @type{?proto.envoy.config.overload.v2alpha.ThresholdTrigger} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.overload.v2alpha.ThresholdTrigger, 2));
};


/** @param {?proto.envoy.config.overload.v2alpha.ThresholdTrigger|undefined} value */
proto.envoy.config.overload.v2alpha.Trigger.prototype.setThreshold = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.overload.v2alpha.Trigger.oneofGroups_[0], value);
};


proto.envoy.config.overload.v2alpha.Trigger.prototype.clearThreshold = function() {
  this.setThreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.overload.v2alpha.Trigger.prototype.hasThreshold = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.overload.v2alpha.OverloadAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.overload.v2alpha.OverloadAction.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.overload.v2alpha.OverloadAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.overload.v2alpha.OverloadAction.displayName = 'proto.envoy.config.overload.v2alpha.OverloadAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.overload.v2alpha.OverloadAction.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.overload.v2alpha.OverloadAction.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.overload.v2alpha.OverloadAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.overload.v2alpha.OverloadAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.overload.v2alpha.OverloadAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    triggersList: jspb.Message.toObjectList(msg.getTriggersList(),
    proto.envoy.config.overload.v2alpha.Trigger.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.overload.v2alpha.OverloadAction}
 */
proto.envoy.config.overload.v2alpha.OverloadAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.overload.v2alpha.OverloadAction;
  return proto.envoy.config.overload.v2alpha.OverloadAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.overload.v2alpha.OverloadAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.overload.v2alpha.OverloadAction}
 */
proto.envoy.config.overload.v2alpha.OverloadAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.envoy.config.overload.v2alpha.Trigger;
      reader.readMessage(value,proto.envoy.config.overload.v2alpha.Trigger.deserializeBinaryFromReader);
      msg.addTriggers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.overload.v2alpha.OverloadAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.overload.v2alpha.OverloadAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.overload.v2alpha.OverloadAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.overload.v2alpha.OverloadAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTriggersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.config.overload.v2alpha.Trigger.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.envoy.config.overload.v2alpha.OverloadAction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.overload.v2alpha.OverloadAction.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Trigger triggers = 2;
 * @return {!Array.<!proto.envoy.config.overload.v2alpha.Trigger>}
 */
proto.envoy.config.overload.v2alpha.OverloadAction.prototype.getTriggersList = function() {
  return /** @type{!Array.<!proto.envoy.config.overload.v2alpha.Trigger>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.overload.v2alpha.Trigger, 2));
};


/** @param {!Array.<!proto.envoy.config.overload.v2alpha.Trigger>} value */
proto.envoy.config.overload.v2alpha.OverloadAction.prototype.setTriggersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.config.overload.v2alpha.Trigger=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.overload.v2alpha.Trigger}
 */
proto.envoy.config.overload.v2alpha.OverloadAction.prototype.addTriggers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.config.overload.v2alpha.Trigger, opt_index);
};


proto.envoy.config.overload.v2alpha.OverloadAction.prototype.clearTriggersList = function() {
  this.setTriggersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.overload.v2alpha.OverloadManager = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.overload.v2alpha.OverloadManager.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.overload.v2alpha.OverloadManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.overload.v2alpha.OverloadManager.displayName = 'proto.envoy.config.overload.v2alpha.OverloadManager';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.overload.v2alpha.OverloadManager.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.overload.v2alpha.OverloadManager.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.overload.v2alpha.OverloadManager} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.overload.v2alpha.OverloadManager.toObject = function(includeInstance, msg) {
  var f, obj = {
    refreshInterval: (f = msg.getRefreshInterval()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    resourceMonitorsList: jspb.Message.toObjectList(msg.getResourceMonitorsList(),
    proto.envoy.config.overload.v2alpha.ResourceMonitor.toObject, includeInstance),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.envoy.config.overload.v2alpha.OverloadAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.overload.v2alpha.OverloadManager}
 */
proto.envoy.config.overload.v2alpha.OverloadManager.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.overload.v2alpha.OverloadManager;
  return proto.envoy.config.overload.v2alpha.OverloadManager.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.overload.v2alpha.OverloadManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.overload.v2alpha.OverloadManager}
 */
proto.envoy.config.overload.v2alpha.OverloadManager.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setRefreshInterval(value);
      break;
    case 2:
      var value = new proto.envoy.config.overload.v2alpha.ResourceMonitor;
      reader.readMessage(value,proto.envoy.config.overload.v2alpha.ResourceMonitor.deserializeBinaryFromReader);
      msg.addResourceMonitors(value);
      break;
    case 3:
      var value = new proto.envoy.config.overload.v2alpha.OverloadAction;
      reader.readMessage(value,proto.envoy.config.overload.v2alpha.OverloadAction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.overload.v2alpha.OverloadManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.overload.v2alpha.OverloadManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.overload.v2alpha.OverloadManager.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRefreshInterval();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getResourceMonitorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.config.overload.v2alpha.ResourceMonitor.serializeBinaryToWriter
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.envoy.config.overload.v2alpha.OverloadAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Duration refresh_interval = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.getRefreshInterval = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.setRefreshInterval = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.envoy.config.overload.v2alpha.OverloadManager.prototype.clearRefreshInterval = function() {
  this.setRefreshInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.hasRefreshInterval = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ResourceMonitor resource_monitors = 2;
 * @return {!Array.<!proto.envoy.config.overload.v2alpha.ResourceMonitor>}
 */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.getResourceMonitorsList = function() {
  return /** @type{!Array.<!proto.envoy.config.overload.v2alpha.ResourceMonitor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.overload.v2alpha.ResourceMonitor, 2));
};


/** @param {!Array.<!proto.envoy.config.overload.v2alpha.ResourceMonitor>} value */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.setResourceMonitorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.config.overload.v2alpha.ResourceMonitor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.overload.v2alpha.ResourceMonitor}
 */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.addResourceMonitors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.config.overload.v2alpha.ResourceMonitor, opt_index);
};


proto.envoy.config.overload.v2alpha.OverloadManager.prototype.clearResourceMonitorsList = function() {
  this.setResourceMonitorsList([]);
};


/**
 * repeated OverloadAction actions = 3;
 * @return {!Array.<!proto.envoy.config.overload.v2alpha.OverloadAction>}
 */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.getActionsList = function() {
  return /** @type{!Array.<!proto.envoy.config.overload.v2alpha.OverloadAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.overload.v2alpha.OverloadAction, 3));
};


/** @param {!Array.<!proto.envoy.config.overload.v2alpha.OverloadAction>} value */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.envoy.config.overload.v2alpha.OverloadAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.overload.v2alpha.OverloadAction}
 */
proto.envoy.config.overload.v2alpha.OverloadManager.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.envoy.config.overload.v2alpha.OverloadAction, opt_index);
};


proto.envoy.config.overload.v2alpha.OverloadManager.prototype.clearActionsList = function() {
  this.setActionsList([]);
};


goog.object.extend(exports, proto.envoy.config.overload.v2alpha);

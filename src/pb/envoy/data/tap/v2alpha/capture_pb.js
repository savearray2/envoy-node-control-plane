/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var envoy_api_v2_core_address_pb = require('../../../../envoy/api/v2/core/address_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.envoy.data.tap.v2alpha.Connection', null, global);
goog.exportSymbol('proto.envoy.data.tap.v2alpha.Event', null, global);
goog.exportSymbol('proto.envoy.data.tap.v2alpha.Event.Read', null, global);
goog.exportSymbol('proto.envoy.data.tap.v2alpha.Event.Write', null, global);
goog.exportSymbol('proto.envoy.data.tap.v2alpha.Trace', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.tap.v2alpha.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.tap.v2alpha.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.data.tap.v2alpha.Connection.displayName = 'proto.envoy.data.tap.v2alpha.Connection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.tap.v2alpha.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.tap.v2alpha.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.tap.v2alpha.Connection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    localAddress: (f = msg.getLocalAddress()) && envoy_api_v2_core_address_pb.Address.toObject(includeInstance, f),
    remoteAddress: (f = msg.getRemoteAddress()) && envoy_api_v2_core_address_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.tap.v2alpha.Connection}
 */
proto.envoy.data.tap.v2alpha.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.tap.v2alpha.Connection;
  return proto.envoy.data.tap.v2alpha.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.tap.v2alpha.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.tap.v2alpha.Connection}
 */
proto.envoy.data.tap.v2alpha.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new envoy_api_v2_core_address_pb.Address;
      reader.readMessage(value,envoy_api_v2_core_address_pb.Address.deserializeBinaryFromReader);
      msg.setLocalAddress(value);
      break;
    case 3:
      var value = new envoy_api_v2_core_address_pb.Address;
      reader.readMessage(value,envoy_api_v2_core_address_pb.Address.deserializeBinaryFromReader);
      msg.setRemoteAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v2alpha.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.tap.v2alpha.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.tap.v2alpha.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.Connection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLocalAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      envoy_api_v2_core_address_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getRemoteAddress();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      envoy_api_v2_core_address_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.envoy.data.tap.v2alpha.Connection.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.envoy.data.tap.v2alpha.Connection.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional envoy.api.v2.core.Address local_address = 2;
 * @return {?proto.envoy.api.v2.core.Address}
 */
proto.envoy.data.tap.v2alpha.Connection.prototype.getLocalAddress = function() {
  return /** @type{?proto.envoy.api.v2.core.Address} */ (
    jspb.Message.getWrapperField(this, envoy_api_v2_core_address_pb.Address, 2));
};


/** @param {?proto.envoy.api.v2.core.Address|undefined} value */
proto.envoy.data.tap.v2alpha.Connection.prototype.setLocalAddress = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.envoy.data.tap.v2alpha.Connection.prototype.clearLocalAddress = function() {
  this.setLocalAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.tap.v2alpha.Connection.prototype.hasLocalAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional envoy.api.v2.core.Address remote_address = 3;
 * @return {?proto.envoy.api.v2.core.Address}
 */
proto.envoy.data.tap.v2alpha.Connection.prototype.getRemoteAddress = function() {
  return /** @type{?proto.envoy.api.v2.core.Address} */ (
    jspb.Message.getWrapperField(this, envoy_api_v2_core_address_pb.Address, 3));
};


/** @param {?proto.envoy.api.v2.core.Address|undefined} value */
proto.envoy.data.tap.v2alpha.Connection.prototype.setRemoteAddress = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.envoy.data.tap.v2alpha.Connection.prototype.clearRemoteAddress = function() {
  this.setRemoteAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.tap.v2alpha.Connection.prototype.hasRemoteAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.tap.v2alpha.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.data.tap.v2alpha.Event.oneofGroups_);
};
goog.inherits(proto.envoy.data.tap.v2alpha.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.data.tap.v2alpha.Event.displayName = 'proto.envoy.data.tap.v2alpha.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.data.tap.v2alpha.Event.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.envoy.data.tap.v2alpha.Event.EventSelectorCase = {
  EVENT_SELECTOR_NOT_SET: 0,
  READ: 2,
  WRITE: 3
};

/**
 * @return {proto.envoy.data.tap.v2alpha.Event.EventSelectorCase}
 */
proto.envoy.data.tap.v2alpha.Event.prototype.getEventSelectorCase = function() {
  return /** @type {proto.envoy.data.tap.v2alpha.Event.EventSelectorCase} */(jspb.Message.computeOneofCase(this, proto.envoy.data.tap.v2alpha.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.tap.v2alpha.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.tap.v2alpha.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.tap.v2alpha.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    read: (f = msg.getRead()) && proto.envoy.data.tap.v2alpha.Event.Read.toObject(includeInstance, f),
    write: (f = msg.getWrite()) && proto.envoy.data.tap.v2alpha.Event.Write.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.tap.v2alpha.Event}
 */
proto.envoy.data.tap.v2alpha.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.tap.v2alpha.Event;
  return proto.envoy.data.tap.v2alpha.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.tap.v2alpha.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.tap.v2alpha.Event}
 */
proto.envoy.data.tap.v2alpha.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.envoy.data.tap.v2alpha.Event.Read;
      reader.readMessage(value,proto.envoy.data.tap.v2alpha.Event.Read.deserializeBinaryFromReader);
      msg.setRead(value);
      break;
    case 3:
      var value = new proto.envoy.data.tap.v2alpha.Event.Write;
      reader.readMessage(value,proto.envoy.data.tap.v2alpha.Event.Write.deserializeBinaryFromReader);
      msg.setWrite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v2alpha.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.tap.v2alpha.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.tap.v2alpha.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRead();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.data.tap.v2alpha.Event.Read.serializeBinaryToWriter
    );
  }
  f = message.getWrite();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.data.tap.v2alpha.Event.Write.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.tap.v2alpha.Event.Read = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.tap.v2alpha.Event.Read, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.data.tap.v2alpha.Event.Read.displayName = 'proto.envoy.data.tap.v2alpha.Event.Read';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.tap.v2alpha.Event.Read.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.tap.v2alpha.Event.Read.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.tap.v2alpha.Event.Read} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.Event.Read.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.tap.v2alpha.Event.Read}
 */
proto.envoy.data.tap.v2alpha.Event.Read.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.tap.v2alpha.Event.Read;
  return proto.envoy.data.tap.v2alpha.Event.Read.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.tap.v2alpha.Event.Read} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.tap.v2alpha.Event.Read}
 */
proto.envoy.data.tap.v2alpha.Event.Read.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v2alpha.Event.Read.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.tap.v2alpha.Event.Read.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.tap.v2alpha.Event.Read} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.Event.Read.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.envoy.data.tap.v2alpha.Event.Read.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.envoy.data.tap.v2alpha.Event.Read.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v2alpha.Event.Read.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.envoy.data.tap.v2alpha.Event.Read.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.tap.v2alpha.Event.Write = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.tap.v2alpha.Event.Write, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.data.tap.v2alpha.Event.Write.displayName = 'proto.envoy.data.tap.v2alpha.Event.Write';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.tap.v2alpha.Event.Write.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.tap.v2alpha.Event.Write.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.tap.v2alpha.Event.Write} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.Event.Write.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    endStream: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.tap.v2alpha.Event.Write}
 */
proto.envoy.data.tap.v2alpha.Event.Write.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.tap.v2alpha.Event.Write;
  return proto.envoy.data.tap.v2alpha.Event.Write.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.tap.v2alpha.Event.Write} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.tap.v2alpha.Event.Write}
 */
proto.envoy.data.tap.v2alpha.Event.Write.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEndStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v2alpha.Event.Write.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.tap.v2alpha.Event.Write.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.tap.v2alpha.Event.Write} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.Event.Write.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEndStream();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.envoy.data.tap.v2alpha.Event.Write.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.envoy.data.tap.v2alpha.Event.Write.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v2alpha.Event.Write.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.envoy.data.tap.v2alpha.Event.Write.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool end_stream = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.envoy.data.tap.v2alpha.Event.Write.prototype.getEndStream = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.envoy.data.tap.v2alpha.Event.Write.prototype.setEndStream = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.envoy.data.tap.v2alpha.Event.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.envoy.data.tap.v2alpha.Event.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.envoy.data.tap.v2alpha.Event.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.tap.v2alpha.Event.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Read read = 2;
 * @return {?proto.envoy.data.tap.v2alpha.Event.Read}
 */
proto.envoy.data.tap.v2alpha.Event.prototype.getRead = function() {
  return /** @type{?proto.envoy.data.tap.v2alpha.Event.Read} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.tap.v2alpha.Event.Read, 2));
};


/** @param {?proto.envoy.data.tap.v2alpha.Event.Read|undefined} value */
proto.envoy.data.tap.v2alpha.Event.prototype.setRead = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.envoy.data.tap.v2alpha.Event.oneofGroups_[0], value);
};


proto.envoy.data.tap.v2alpha.Event.prototype.clearRead = function() {
  this.setRead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.tap.v2alpha.Event.prototype.hasRead = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Write write = 3;
 * @return {?proto.envoy.data.tap.v2alpha.Event.Write}
 */
proto.envoy.data.tap.v2alpha.Event.prototype.getWrite = function() {
  return /** @type{?proto.envoy.data.tap.v2alpha.Event.Write} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.tap.v2alpha.Event.Write, 3));
};


/** @param {?proto.envoy.data.tap.v2alpha.Event.Write|undefined} value */
proto.envoy.data.tap.v2alpha.Event.prototype.setWrite = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.envoy.data.tap.v2alpha.Event.oneofGroups_[0], value);
};


proto.envoy.data.tap.v2alpha.Event.prototype.clearWrite = function() {
  this.setWrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.tap.v2alpha.Event.prototype.hasWrite = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.tap.v2alpha.Trace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.data.tap.v2alpha.Trace.repeatedFields_, null);
};
goog.inherits(proto.envoy.data.tap.v2alpha.Trace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.data.tap.v2alpha.Trace.displayName = 'proto.envoy.data.tap.v2alpha.Trace';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.data.tap.v2alpha.Trace.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.tap.v2alpha.Trace.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.tap.v2alpha.Trace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.tap.v2alpha.Trace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.Trace.toObject = function(includeInstance, msg) {
  var f, obj = {
    connection: (f = msg.getConnection()) && proto.envoy.data.tap.v2alpha.Connection.toObject(includeInstance, f),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.envoy.data.tap.v2alpha.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.tap.v2alpha.Trace}
 */
proto.envoy.data.tap.v2alpha.Trace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.tap.v2alpha.Trace;
  return proto.envoy.data.tap.v2alpha.Trace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.tap.v2alpha.Trace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.tap.v2alpha.Trace}
 */
proto.envoy.data.tap.v2alpha.Trace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.data.tap.v2alpha.Connection;
      reader.readMessage(value,proto.envoy.data.tap.v2alpha.Connection.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    case 2:
      var value = new proto.envoy.data.tap.v2alpha.Event;
      reader.readMessage(value,proto.envoy.data.tap.v2alpha.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v2alpha.Trace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.tap.v2alpha.Trace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.tap.v2alpha.Trace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.Trace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.data.tap.v2alpha.Connection.serializeBinaryToWriter
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.data.tap.v2alpha.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional Connection connection = 1;
 * @return {?proto.envoy.data.tap.v2alpha.Connection}
 */
proto.envoy.data.tap.v2alpha.Trace.prototype.getConnection = function() {
  return /** @type{?proto.envoy.data.tap.v2alpha.Connection} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.tap.v2alpha.Connection, 1));
};


/** @param {?proto.envoy.data.tap.v2alpha.Connection|undefined} value */
proto.envoy.data.tap.v2alpha.Trace.prototype.setConnection = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.envoy.data.tap.v2alpha.Trace.prototype.clearConnection = function() {
  this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.tap.v2alpha.Trace.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Event events = 2;
 * @return {!Array.<!proto.envoy.data.tap.v2alpha.Event>}
 */
proto.envoy.data.tap.v2alpha.Trace.prototype.getEventsList = function() {
  return /** @type{!Array.<!proto.envoy.data.tap.v2alpha.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.data.tap.v2alpha.Event, 2));
};


/** @param {!Array.<!proto.envoy.data.tap.v2alpha.Event>} value */
proto.envoy.data.tap.v2alpha.Trace.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.data.tap.v2alpha.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.data.tap.v2alpha.Event}
 */
proto.envoy.data.tap.v2alpha.Trace.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.data.tap.v2alpha.Event, opt_index);
};


proto.envoy.data.tap.v2alpha.Trace.prototype.clearEventsList = function() {
  this.setEventsList([]);
};


goog.object.extend(exports, proto.envoy.data.tap.v2alpha);

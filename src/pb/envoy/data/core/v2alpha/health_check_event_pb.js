/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var envoy_api_v2_core_address_pb = require('../../../../envoy/api/v2/core/address_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var validate_validate_pb = require('../../../../validate/validate_pb.js');
var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.exportSymbol('proto.envoy.data.core.v2alpha.HealthCheckAddHealthy', null, global);
goog.exportSymbol('proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy', null, global);
goog.exportSymbol('proto.envoy.data.core.v2alpha.HealthCheckEvent', null, global);
goog.exportSymbol('proto.envoy.data.core.v2alpha.HealthCheckFailure', null, global);
goog.exportSymbol('proto.envoy.data.core.v2alpha.HealthCheckFailureType', null, global);
goog.exportSymbol('proto.envoy.data.core.v2alpha.HealthCheckerType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.data.core.v2alpha.HealthCheckEvent.oneofGroups_);
};
goog.inherits(proto.envoy.data.core.v2alpha.HealthCheckEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.data.core.v2alpha.HealthCheckEvent.displayName = 'proto.envoy.data.core.v2alpha.HealthCheckEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.oneofGroups_ = [[4,5,7]];

/**
 * @enum {number}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.EventCase = {
  EVENT_NOT_SET: 0,
  EJECT_UNHEALTHY_EVENT: 4,
  ADD_HEALTHY_EVENT: 5,
  HEALTH_CHECK_FAILURE_EVENT: 7
};

/**
 * @return {proto.envoy.data.core.v2alpha.HealthCheckEvent.EventCase}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.getEventCase = function() {
  return /** @type {proto.envoy.data.core.v2alpha.HealthCheckEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.envoy.data.core.v2alpha.HealthCheckEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.core.v2alpha.HealthCheckEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    healthCheckerType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    host: (f = msg.getHost()) && envoy_api_v2_core_address_pb.Address.toObject(includeInstance, f),
    clusterName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ejectUnhealthyEvent: (f = msg.getEjectUnhealthyEvent()) && proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.toObject(includeInstance, f),
    addHealthyEvent: (f = msg.getAddHealthyEvent()) && proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.toObject(includeInstance, f),
    healthCheckFailureEvent: (f = msg.getHealthCheckFailureEvent()) && proto.envoy.data.core.v2alpha.HealthCheckFailure.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckEvent}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.core.v2alpha.HealthCheckEvent;
  return proto.envoy.data.core.v2alpha.HealthCheckEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckEvent}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.envoy.data.core.v2alpha.HealthCheckerType} */ (reader.readEnum());
      msg.setHealthCheckerType(value);
      break;
    case 2:
      var value = new envoy_api_v2_core_address_pb.Address;
      reader.readMessage(value,envoy_api_v2_core_address_pb.Address.deserializeBinaryFromReader);
      msg.setHost(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClusterName(value);
      break;
    case 4:
      var value = new proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy;
      reader.readMessage(value,proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.deserializeBinaryFromReader);
      msg.setEjectUnhealthyEvent(value);
      break;
    case 5:
      var value = new proto.envoy.data.core.v2alpha.HealthCheckAddHealthy;
      reader.readMessage(value,proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.deserializeBinaryFromReader);
      msg.setAddHealthyEvent(value);
      break;
    case 7:
      var value = new proto.envoy.data.core.v2alpha.HealthCheckFailure;
      reader.readMessage(value,proto.envoy.data.core.v2alpha.HealthCheckFailure.deserializeBinaryFromReader);
      msg.setHealthCheckFailureEvent(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.core.v2alpha.HealthCheckEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealthCheckerType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHost();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      envoy_api_v2_core_address_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getClusterName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEjectUnhealthyEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.serializeBinaryToWriter
    );
  }
  f = message.getAddHealthyEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.serializeBinaryToWriter
    );
  }
  f = message.getHealthCheckFailureEvent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.envoy.data.core.v2alpha.HealthCheckFailure.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional HealthCheckerType health_checker_type = 1;
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckerType}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.getHealthCheckerType = function() {
  return /** @type {!proto.envoy.data.core.v2alpha.HealthCheckerType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.envoy.data.core.v2alpha.HealthCheckerType} value */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.setHealthCheckerType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional envoy.api.v2.core.Address host = 2;
 * @return {?proto.envoy.api.v2.core.Address}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.getHost = function() {
  return /** @type{?proto.envoy.api.v2.core.Address} */ (
    jspb.Message.getWrapperField(this, envoy_api_v2_core_address_pb.Address, 2));
};


/** @param {?proto.envoy.api.v2.core.Address|undefined} value */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.setHost = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.clearHost = function() {
  this.setHost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.hasHost = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string cluster_name = 3;
 * @return {string}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.getClusterName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.setClusterName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional HealthCheckEjectUnhealthy eject_unhealthy_event = 4;
 * @return {?proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.getEjectUnhealthyEvent = function() {
  return /** @type{?proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy, 4));
};


/** @param {?proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy|undefined} value */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.setEjectUnhealthyEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.envoy.data.core.v2alpha.HealthCheckEvent.oneofGroups_[0], value);
};


proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.clearEjectUnhealthyEvent = function() {
  this.setEjectUnhealthyEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.hasEjectUnhealthyEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional HealthCheckAddHealthy add_healthy_event = 5;
 * @return {?proto.envoy.data.core.v2alpha.HealthCheckAddHealthy}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.getAddHealthyEvent = function() {
  return /** @type{?proto.envoy.data.core.v2alpha.HealthCheckAddHealthy} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.core.v2alpha.HealthCheckAddHealthy, 5));
};


/** @param {?proto.envoy.data.core.v2alpha.HealthCheckAddHealthy|undefined} value */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.setAddHealthyEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.envoy.data.core.v2alpha.HealthCheckEvent.oneofGroups_[0], value);
};


proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.clearAddHealthyEvent = function() {
  this.setAddHealthyEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.hasAddHealthyEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional HealthCheckFailure health_check_failure_event = 7;
 * @return {?proto.envoy.data.core.v2alpha.HealthCheckFailure}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.getHealthCheckFailureEvent = function() {
  return /** @type{?proto.envoy.data.core.v2alpha.HealthCheckFailure} */ (
    jspb.Message.getWrapperField(this, proto.envoy.data.core.v2alpha.HealthCheckFailure, 7));
};


/** @param {?proto.envoy.data.core.v2alpha.HealthCheckFailure|undefined} value */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.setHealthCheckFailureEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.envoy.data.core.v2alpha.HealthCheckEvent.oneofGroups_[0], value);
};


proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.clearHealthCheckFailureEvent = function() {
  this.setHealthCheckFailureEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.hasHealthCheckFailureEvent = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.data.core.v2alpha.HealthCheckEvent.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.displayName = 'proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.toObject = function(includeInstance, msg) {
  var f, obj = {
    failureType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy}
 */
proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy;
  return proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy}
 */
proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.envoy.data.core.v2alpha.HealthCheckFailureType} */ (reader.readEnum());
      msg.setFailureType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFailureType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional HealthCheckFailureType failure_type = 1;
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckFailureType}
 */
proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.prototype.getFailureType = function() {
  return /** @type {!proto.envoy.data.core.v2alpha.HealthCheckFailureType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.envoy.data.core.v2alpha.HealthCheckFailureType} value */
proto.envoy.data.core.v2alpha.HealthCheckEjectUnhealthy.prototype.setFailureType = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.core.v2alpha.HealthCheckAddHealthy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.core.v2alpha.HealthCheckAddHealthy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.displayName = 'proto.envoy.data.core.v2alpha.HealthCheckAddHealthy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckAddHealthy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstCheck: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckAddHealthy}
 */
proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.core.v2alpha.HealthCheckAddHealthy;
  return proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckAddHealthy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckAddHealthy}
 */
proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFirstCheck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckAddHealthy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstCheck();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool first_check = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.prototype.getFirstCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.envoy.data.core.v2alpha.HealthCheckAddHealthy.prototype.setFirstCheck = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.core.v2alpha.HealthCheckFailure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.data.core.v2alpha.HealthCheckFailure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.data.core.v2alpha.HealthCheckFailure.displayName = 'proto.envoy.data.core.v2alpha.HealthCheckFailure';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.core.v2alpha.HealthCheckFailure.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.core.v2alpha.HealthCheckFailure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckFailure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.core.v2alpha.HealthCheckFailure.toObject = function(includeInstance, msg) {
  var f, obj = {
    failureType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    firstCheck: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckFailure}
 */
proto.envoy.data.core.v2alpha.HealthCheckFailure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.core.v2alpha.HealthCheckFailure;
  return proto.envoy.data.core.v2alpha.HealthCheckFailure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckFailure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckFailure}
 */
proto.envoy.data.core.v2alpha.HealthCheckFailure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.envoy.data.core.v2alpha.HealthCheckFailureType} */ (reader.readEnum());
      msg.setFailureType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFirstCheck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.core.v2alpha.HealthCheckFailure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.core.v2alpha.HealthCheckFailure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.core.v2alpha.HealthCheckFailure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.core.v2alpha.HealthCheckFailure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFailureType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFirstCheck();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional HealthCheckFailureType failure_type = 1;
 * @return {!proto.envoy.data.core.v2alpha.HealthCheckFailureType}
 */
proto.envoy.data.core.v2alpha.HealthCheckFailure.prototype.getFailureType = function() {
  return /** @type {!proto.envoy.data.core.v2alpha.HealthCheckFailureType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.envoy.data.core.v2alpha.HealthCheckFailureType} value */
proto.envoy.data.core.v2alpha.HealthCheckFailure.prototype.setFailureType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool first_check = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.envoy.data.core.v2alpha.HealthCheckFailure.prototype.getFirstCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.envoy.data.core.v2alpha.HealthCheckFailure.prototype.setFirstCheck = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.envoy.data.core.v2alpha.HealthCheckFailureType = {
  ACTIVE: 0,
  PASSIVE: 1,
  NETWORK: 2
};

/**
 * @enum {number}
 */
proto.envoy.data.core.v2alpha.HealthCheckerType = {
  HTTP: 0,
  TCP: 1,
  GRPC: 2,
  REDIS: 3
};

goog.object.extend(exports, proto.envoy.data.core.v2alpha);
